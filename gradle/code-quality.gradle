apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'


def configDir = "$project.rootDir/config/"
def reportsDir = "$project.buildDir/reports"

check.dependsOn 'checkstyle', 'findbugs', 'pmd'

task checkstyle(type: Checkstyle, group: 'Verification', description: 'Runs code style checks') {
    configFile file("$configDir/checkstyle-rules.xml")
    source 'src'
    include '**/*.java'

    ignoreFailures true
    showViolations true

    reports {
        xml.enabled = true
        xml.destination file("$reportsDir/checkstyle/checkstyle.xml")
    }

    classpath = files()
}

task findbugs(type: FindBugs,
        group: 'Verification',
        description: 'Inspect java bytecode for bugs',
        dependsOn: ['compileDebugSources', 'compileReleaseSources']) {

    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("$configDir/findbugs-exclude-filter.xml")
    classes = files("$project.buildDir/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = false
        xml.destination file("$reportsDir/findbugs/findbugs.xml")
        html.destination file("$reportsDir/findbugs/findbugs.html")
    }

    classpath = files()
}

task pmd(type: Pmd) {
    ruleSetFiles = files("$configDir/pmd-ruleset.xml")
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/MockFactory.java**'

    ignoreFailures = true

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination file("$project.buildDir/reports/pmd/pmd.xml")
        html.destination file("$project.buildDir/reports/pmd/pmd.html")
    }
}